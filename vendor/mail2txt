#!/usr/bin/env python3

import sys
import os
import re
import argparse

import email
from email.message import EmailMessage
from email.header import decode_header

script = sys.argv[0]
args = sys.argv[1:]

def usage():
    return "%s FILE\n" % os.path.basename(script)

parser = argparse.ArgumentParser(description='Convert a mail file to text.')
parser.add_argument('--redact-addresses',dest='redact',action='store_true')
parser.add_argument('file')

args = parser.parse_args()

arg = args.file
redact = args.redact

def decode_pair(pair):
    decoded_string = pair[0]
    charset = pair[1]

    if charset is None:
        if isinstance(decoded_string, bytes):
            return decoded_string.decode("ascii")
        else:
            return decoded_string

    return decoded_string.decode(charset)

def redact_address(text):
    matches = re.findall(r"([^\s@]+)@([^\s@]+)\.([^\s]+)",text)
    print(matches)
    match = re.match(r"(.*[^a-z])?([a-z]+)@([a-z]+)\.(.+)",text)
    if(match is None):
        return text
    recipient = match.group(2)
    subdomain = match.group(3)
    domain = match.group(4)
    # TODO format FTW
    return re.sub(r".","*",recipient) + "@" + re.sub(".","*",subdomain) + "." + domain

headers = ['Date','From','To','Cc','Bcc','Subject']

def mail2txt(file):
    no_text_plain_error_message = 'This message does not contain a plaintext part.'

    message = email.message_from_file(file,_class=EmailMessage)

    if message.get_default_type() != 'text/plain':
        raise ValueError(no_text_plain_error_message)

    has_text_plain = False

    for part in message.walk():
        if part.get_content_type() == message.get_default_type():
            has_text_plain = True
            break

    if not has_text_plain:
        raise ValueError(no_text_plain_error_message)

    for header in headers:
        if header not in message:
            continue

        header_list_pair = decode_header(message[header])
        decoded_mime_header = "".join([*map(lambda x: decode_pair(x),header_list_pair)])
        mime_header = decoded_mime_header

        if redact:
            mime_header = redact_address(mime_header)

        print("%s: %s" % (header,mime_header))

    print()

    to_decode = set(["base64","quoted-printable"])

    for part in message.walk():
        if part.get_content_type() != message.get_default_type():
            continue

        content_transfer_encoding = part['Content-Transfer-Encoding']

        if content_transfer_encoding in to_decode:
            payload = part.get_payload(decode=True)
            print(payload.decode(part.get_content_charset()))
            break

        print(part.get_payload())
        break

    if not redact:
        print("---------- HEADERS ----------")
        for entry in  message.items():
            print("{}: {}".format(entry[0], entry[1]))

if arg == "-":
    mail2txt(sys.stdin) # '-' reads from standard input
    sys.exit(0)

file_to_parse = open(arg)
mail2txt(file_to_parse)
